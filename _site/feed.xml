<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-23T23:39:10+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">e-ul</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>e-ul</name></author><entry><title type="html">Git 시작하기</title><link href="http://localhost:4000/git/2022/02/23/Git-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="Git 시작하기" /><published>2022-02-23T00:00:00+09:00</published><updated>2022-02-23T00:00:00+09:00</updated><id>http://localhost:4000/git/2022/02/23/Git%20%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/git/2022/02/23/Git-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0.html"><![CDATA[<p>gitHub Page 포스팅을 위해서 첫 포스팅날 강제로 Git 공부를 좀 하고,,,<br />
이걸 기록을 해놔야겠다고 생각은 했는데 아무래도 나는 갓생러😉✨다보니^~^ 다른 일들에 밀려 좀 늦었다<br />
하지만 안 하는 것보다는 낫잖아요하하</p>

<p><em>아래의 모든 것은 Mac에서 진행되었습니다</em></p>

<h2 id="1-git-시작하기설치하기">1. Git 시작하기(설치하기)</h2>
<p>Mac 유저라면,,,HomeBrew 설치 바랍니다..정말 너무 편하거든요… 그래서 gitHub Blog 만들기에서 그랬듯이 HomeBrew 있다고 믿고 시작한다!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install git
git --version
</code></pre></div></div>
<p>homebrew를 설치해뒀다면 terminal을 열고 위 command만 입력하면 git 설치는 끝!
설치 잘 되었는지 git –version 입력해서 확인 한 번 해줍니다</p>

<p>GitHub에서 Repository를 생성하고 사용해 본다면 GitHub이 아래와 같이 친절하게☺️ 가이드를 준답니다</p>

<h4 id="-git-repository를-처음-생성했을-때">✤ Git Repository를 처음 생성했을 때</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
git add .
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/your_name/your_Repo_name.git
git push -u origin main
</code></pre></div></div>

<p>git init : git initialize<br />
git add . : git stage에 파일 추가. git add . 에서 “ . “ 의 의미는 현재 directory 아래의 모든 파일이라는 뜻이다. 특정 파일만 지정하고 싶으면 . 자리에 파일명을 입력해 주면 됨<br />
git commit -m “commit message” : stage에 올린 파일 commit<br />
git branch -M main : 브랜치를 생성한다.</p>

<blockquote>
  <p>Git은 원래 기본 Branch명이 master였으나, master/slave 용어 사용을 지양하려는 움직임으로 기본 브랜치 이름을 main으로 변경하였다. 너무 좋은 변화😌</p>
</blockquote>

<p>git remote add origin URL : 원격저장소와의 연결<br />
git push -u origin main : 원격저장소에 commit내용 push</p>

<h4 id="-기-생성된-repository를-사용할-때">✤ 기 생성된 Repository를 사용할 때</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote add origin https://github.com/your_name/your_Repo_name.git
git branch -M main
git push -u origin main
</code></pre></div></div>
<p>이미 있는 Repository를 사용하는 건 훨씬 간단!</p>

<h2 id="2-git-config-확인하고-설정하기">2. Git Config 확인하고 설정하기</h2>
<p>사실 별 것 안 하고 곱게 add, commit, push만 한다면 Config에 신경 쓸 필요없을 것 같기도 하다.<br />
하지만 난 ⇩3번의 이슈가 있었기 때문에…알아두면 좋겠다고 생각했음</p>

<p>🪄나의 git 설정정보 알아보기</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config --list
git config --global --list
</code></pre></div></div>
<p>git에 연결한 폴더에서 보면 해당 git에 대한 config를 볼 수 있고 git에 연결하지 않은 폴더에서 보면 global config만 보인다<br />
git에 연결된 폴더에서도 global config만 보고  싶으면 –global 옵션만 붙여주면 됨.</p>

<h2 id="3-git-user-commit한-author-변경하기">3. Git user, commit한 author 변경하기</h2>
<h3 id="1-git-config의-user를-변경하기">1. Git Config의 user를 변경하기</h3>
<p>나의 경우, gitHub에 commit한 author이름을 바꾸고 싶었다…<br />
config를 확인하지 않고 올렸더니 내 컴퓨터 설정이름대로 올라가더라구,,,<br />
gitHub 계정명이랑 통일하고 싶었기때문에 config변경이 필요했다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config --global user.name "e-ul"
git config --global user.email e-ul@mail.me
</code></pre></div></div>

<p>나는 모든 repository에서 e-ul이라는 이름을 쓰고자 했기때문에 –global 옵션을 주고 변경했고   repository별로 다른 이름 사용하고 싶을 땐 –global 옵션만 빼주면 된다</p>

<p>하지만 이렇게 config만 변경하면 내가 앞으로 push할 commit들의 이름만 변경된 것으로 올라간다.<br />
전 통일감을 중시하기때문에 이미 commit된 것들도 author를 수정하고 싶었어요</p>

<h3 id="2-commit의-author-변경">2. Commit의 author 변경</h3>
<p>git rebase를 사용하여 나의 Commit History를 변경하는 방법이다<br />
rebase는 Branch를 병합하는데 사용되는 명령어인데…이 개념은 다음에 알아보기로 하고…<del>(포스트 하나 쓸 때마다 다음 쓸 포스트 주제가 생기는게 뭔가,,,무한확장하는 과제 같고..ㅠ)</del><br />
일단은 결과만 얻어내 보겠습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git rebase -i HEAD~3
</code></pre></div></div>
<p>수정하고 싶은 commit이 나올때까지 HEAD~뒤의 숫자를 조정해준다.</p>

<p>아래와 같은 화면이 뜰 텐데 I를 눌러 편집모드로 전환해준 뒤, 변경하고자하는 commitID 앞의 pick –&gt; e 로 변경한다.<br />
아래 캡쳐에서 보면 알겠지만, e는 edit commit이다.</p>

<p><img src="https://user-images.githubusercontent.com/98747932/155332482-8ef33b45-8027-4ff3-ae65-1c424c10669e.png" alt="git Rebase" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit --amend --author="e-ul &lt;e-ul@mail.me&gt;"
git rebase --continue
git push -f origin main
</code></pre></div></div>
<p>위와 같이 –author=”사용자명 <이메일주소>" 형식으로 옵션을 주고 commit / rebase continue / push 해주면 commit author가 바뀐 것을 확인할 수 있다.</이메일주소></p>

<h2 id="4-github-commit은-했는데-잔디가-심어지지-않는다">4. <em>GitHub Commit은 했는데 잔디가 심어지지 않는다?</em></h2>
<p>author까지 바꿔가면서 commit 해뒀는데….며칠 후에 보니 잔디가 하나도 심어지지 않고 있는 것을 확인했다…<br />
   잠시 농장주의 꿈을 꿨는데….황량한 나의 밭을 보며…<del>(몇 번 심지도 않음)</del> 솜사탕 씻은 너구리가 되고 마는데<br />
   결론은… 또 rebase 야무지게 사용해서 GitHub 잔디밭과 원만히 합의 봤습니다🤓.<br />
   이쯤되면 rebase를 제대로 정리해야겠다는 필요성이 느껴지기 때문에,,,<br />
   Git 2편으로 다시 돌아오기를 약속하면서…이만 끝😇</p>]]></content><author><name>e-ul</name></author><category term="Git" /><category term="Git" /><category term="GitHub" /><summary type="html"><![CDATA[gitHub Page 포스팅을 위해서 첫 포스팅날 강제로 Git 공부를 좀 하고,,, 이걸 기록을 해놔야겠다고 생각은 했는데 아무래도 나는 갓생러😉✨다보니^~^ 다른 일들에 밀려 좀 늦었다 하지만 안 하는 것보다는 낫잖아요하하]]></summary></entry><entry><title type="html">GitHub 블로그 만들기🪄</title><link href="http://localhost:4000/blog/2022/02/09/blog-Creating-GitHub-Blog.html" rel="alternate" type="text/html" title="GitHub 블로그 만들기🪄" /><published>2022-02-09T00:00:00+09:00</published><updated>2022-02-09T00:00:00+09:00</updated><id>http://localhost:4000/blog/2022/02/09/%5Bblog%5D%20Creating%20GitHub%20Blog</id><content type="html" xml:base="http://localhost:4000/blog/2022/02/09/blog-Creating-GitHub-Blog.html"><![CDATA[<p>🪄 나도 만들었다 GitHub 블로그 ! ! !<br />
다시 만들 일은… 없을 것 같지만 기록은 해두기로 했다</p>

<h2 id="1-github-계정-생성">1. GitHub 계정 생성</h2>

<p>개인 블로그용 플랫폼으로 GitHub Pages를 선택했다면, 당연히 GitHub 계정부터 생성해줘야 한다<br />
<a href="https://github.com/">GitHub</a> 에 접속하여 화면 오른 쪽 상단의 Sign Up 을 클릭해주면 아래와 같은 페이지가 뜬다</p>

<p><img src="https://user-images.githubusercontent.com/98747932/153113835-3801bbab-9b37-44e5-a38f-c8002096fd8c.png" alt="GitHub SignUp" /></p>

<p>시키는 대로 email, password, 계정이름 입력하면 계정생성은 금방 끝난다<br />
<span style="color:grey"><del>(근데 github 계정 생성 페이지 언제부터 이렇게 예뻐진거지…)</del></span></p>

<h2 id="2-github-pages용-repository-생성">2. GitHub Pages용 Repository 생성</h2>

<p>계정 생성 끝났으면 놀지 말고 바로 Repository 까지는 생성해 줘야 한다.<br />
한 번 미루면 계속 안하니까….</p>

<p><img src="https://user-images.githubusercontent.com/98747932/153114469-4714bc95-be59-4184-a207-73f22437a717.png" alt="Repository 생성" /> 
<img src="https://user-images.githubusercontent.com/98747932/153114696-5bbfb1da-d557-455f-ab40-d709e9f90ca2.png" alt="" /></p>

<p>뭐 위 둘 중 하나의 화면 찾아서 초록색 New 버튼 눌러주고 Repository를 생성해 준다.</p>

<p><img src="https://user-images.githubusercontent.com/98747932/153114921-6f7fbf8c-42fb-4681-933c-8e748be9ca6f.png" alt="" /></p>

<p>나는 이미 Repository를 생성했기 때문에 빨간 경고창이 뜨는 것이니…그건 지나가시고….<br />
Repository Name에는 나의 <strong><em>계정명</em>.github.io</strong> 를 적어주셔야 합니다.<br />
왜냐면 계정명이 다르면 가끔 연결이 잘 안될때가 있대요..저는 쫄보니까 그냥 시키는대로 합니다</p>

<p>Repository 공개 설정은 <strong>Public</strong>으로 해야한다. Private로 하면 블로그가 보이지를 않아요… 404의 연속<br />
Private Repository를 GitHub용도로 쓰려면 Pro구독을 해야한다고 하니…. 각자 알아서 하시면 되겠습니다🤑</p>

<p>README.md는 추가하라는 사람도 있고 아닌 사람도 있는데, 나는 어차피 Jekyll Theme 통째로 다운받아서 적용할 것이기때문에 없이 그냥 바로 생성했다.</p>

<h2 id="3-github-블로그에-입힐-jekyll-theme-고르기">3. GitHub 블로그에 입힐 Jekyll Theme 고르기</h2>

<p>나는 사실 Jekyll Theme는 미리 정해뒀다.<br />
왜냐면 새 맥이 올 때까지 GitHub 계정/Repository만 만들어 두고 clone땡기지 않았기 때문….!<br />
나는 새 마음 새 뜻으로 시작하는게 좋아서 새 컴퓨터 올 때 까지 존버<span style="color:grey"><del>(존중하며 버티기)</del></span>했다.<br />
그래서 미리 테마들을 둘러보고 후보를 추려 뒀었지… 후후😎</p>

<p>개인적으로 추려둔 후보들은 다음과 같습니다.</p>
<ul>
  <li>Yat</li>
  <li>Mediumish</li>
  <li>Chirpy</li>
  <li>Minimal Mistakes</li>
</ul>

<p>막상 적용하려고 마지막 선택하려니까 귀찮아서 그냥 적어둔 것 중에 맨 위에 적어둔 걸로 바로… 배포했음<br />
Jekyll Theme 추천이라고 검색하면 수 없이 많이 나오니까… 캡쳐도 귀찮고 하니까 테마 고르기 관련은 여기까지</p>

<h2 id="4-jekyll-theme-받아서-적용하기">4. Jekyll Theme 받아서 적용하기</h2>

<p>나는 사실 GitHub Pages를 시작하겠다고 다짐하면서 Jekyll을 알게되었는데, 이걸 내 블로그에 적용하려면 생각보다 나름 절차가 필요했다.<br />
그냥 냅다 fork해서… push한다고 되는 일이 아니었음…😞<br />
이래서 github은 진입장벽이 있다고 하는 거구나….하지만 너무 쉬우면 재미없다<br />
징징 짜면서 꾸역꾸역해야 돼 인생이 다 그런거야 지치지마</p>

<blockquote>
  <p>여기부터는 기억을 더듬어 작성한 것이므로….순서가 다르거나…그냥 틀렸거나….뭔가 빠져있을 수 있습니다<br />
그럼 알려주세요… 수정하면 되잖아요? 같이 알아가면 되지…꼽 주기는 하지말자ㅠ나 기죽어…</p>
</blockquote>

<h3 id="1-나의-github-pages용-repository를-내-local로-clone">1. 나의 GitHub Pages용 Repository를 내 Local로 clone</h3>

<p>GitHub 블로그는 다른 플랫폼 처럼 웹상에서 Post를 작업하는 방식이 아니라, 내가 Post를 작성하고 Git에 올려 다른사람들이 볼 수 있도록 배포하는 방식이라고 할 수 있겠다.<br />
그래서 일단 내 블로그 소스를 받아서 Local에서 작업하면서 결과물을 확인하고, 결과물이 맘에 든다? 그때 올려.<br />
물론 난 맘에 안 들어도 일단 올림. 내 맘임.</p>

<p>무튼 그래서 제일 처음 할 일은 <strong><em>2.GitHub Pages용 Repository 생성</em></strong> 에서 만든 나의 Repository를 내 PC에 clone해 오는 것이다.</p>

<p>이제… git을 사용해야 한다.<br />
아니 블로그 하는데 git을 사용해야한다는 것 부터가 일단 진입장벽이다..<br />
내가 개발자 아니었음 여기서 벌써 울면서 이거 안한다고 때려쳤음</p>

<p><img src="https://user-images.githubusercontent.com/98747932/153118371-fba4cb29-89ce-4d5f-8512-aae3c19b2718.png" alt="git clone" /></p>

<p>나는 이미 테마도 적용하고 commit도 해서 뭐가 많지만 아마 새로 생성한 Repository는 텅~텅~ 비었을 것이다.<br />
하지만 그런게 뭐가 중요하겠어요. 지금부터 할 건데 ! ! !</p>

<p>내 Local에 저 Repository를 받을 위치를 정합니다. 이건 다 본인 마음대로…<br />
난 개인적으로 따로 만들어둔 workspace Volume에 GitHub Blog 폴더를 만들어뒀고<br />
여기에다가 clone을 해오기로 했다.</p>

<p>그러면 이제 git clone을 받아야하니… 다들 terminal을 여세요. iTerms쓰는 사람 많다던데 난 그냥 terminal 씀</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /volumes/workspace/GitHub\ Blog
</code></pre></div></div>

<p>이런 식으로 내가 Repository를 받아올 위치로 cd 명령어를 사용해 이동하고<br />
냅다 clone 받습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/e-ul/e-ul.github.io.git
</code></pre></div></div>

<p>git clone 뒤에 clone해 올 Repository 주소를 쓰면 되는데 이건 다 하나하나 치려고 하지말구<br />
위에 캡쳐 보면 알 수 있듯 Code 클릭하면 나오는 저 주소! 저거니까 복사해서 치도록 합시다.<br />
이런거 오타나면 찾기 어려우니까 easy~~하게 가자고~</p>

<p>git clone을 하고 나면<br />
내가 지정했던 폴더<span style="color:grey">(나의 경우는 workspace/GitHub\ Blog 여기)</span> 아래에 <em>계정명.github.io</em> 라는 폴더가 만들어 졌을 것이다</p>

<blockquote>
  <p>아 git 이 없으시다고요….? 거 참 곤란하군<br />
저는 Mac 기준인데 Mac이라면 일단 HomeBrew를 설치하고…거기서 git을 다운받는 방법을 추천합니다<br />
어차피 HomeBrew는 두루두루 쓸거니까 설치하는게 좋고 제일 쉽다고 생각함<br />
나중에 시간 많고 안귀찮으면……..뭐,, git 공부도 차차 해볼게요..나도 잘모르니까 공부해서 써야됨..😖</p>
</blockquote>

<h3 id="2-골라-둔-jekyll-theme-다운받기">2. 골라 둔 Jekyll Theme 다운받기</h3>
<p><img src="https://user-images.githubusercontent.com/98747932/153117326-3f3c30ad-8fa1-4dff-b56f-8a269596c007.png" alt="Yat" /></p>

<p>이것이 내가 선택한 Yat Theme다. <br />
초록색 Code 버튼을 누르고 download ZIP으로 통째로 내려받아서 나의 Local Git 위치에 풀었다…!</p>

<p>나는 성격이 급해가지고 일단 이게 잘 받아진건지… 작동이 되는지 알아보고 싶은 사람이기때문에 당장에 띄워보기부터 하고 싶었다.<br />
(push 바로 해서 올리면 웹으로 확인할 수 있지만…. 전 commit이력을 그렇게 허비하고 싶지 않았어요)<br />
하지만!! gitHub 블로그는? 진입장벽이 높다 그랬다.<br />
냅다 켜는 법을 모름… 이것도 배워야 돼….<br />
<span style="color:grey"><del>내 블로그 가지기전에 서러워서 울겠어😭</del></span></p>

<p>Jekyll은 Ruby로 만든 것이기 때문에 Ruby부터 설치해야 한다.</p>

<p><em><strong>Mac 기준</strong></em></p>

<p>Mac 유저라면 꼬옥… HomeBrew 설치해주었으면….너무 편함<br />
그래서 여러분 모두 HomeBrew 설치했을거라 믿고 진도 나간다 정신차려~</p>

<h4 id="ruby-설치하기">Ruby 설치하기</h4>

<p>mac의 경우는 ruby가 내장 되어있기때문에 Ruby를 따로 설치해주지 않고 진행하면 권한 문제가 발생한다.<br />
Ruby 설치 안 해 뒀으면 어차피 이거 뛰어넘고 해도 다시 돌아오게 되어있다 이 말씀~.~</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew update  // 일단 Brew 최신버전 맞춰주고
brew install rbenv ruby-build // ruby 설치

rbenv versions // 내가 설치한 ruby 버전 확인
// 여기서 mac은 내장 ruby (System이라고 표시됨)를 사용할 수 도 있다..

rbenv install -l // 설치가능한 ruby list 보기

// 개인적으로 젤 마지막으로 나온 것의 전 거 받는 걸 좋아하기때문에 나는 3.0.3 버전 선택

rbenv install 3.0.3

rbenv versions // 내가 설치한 ruby 버전 다시 확인
// 그러면 아마 새로 설치한 3.0.3과 system이 둘다 보일 것
// 하지만 *로 선택된게 system이라면 내가 새로 설치한 ruby를 선택하도록 해주어야함

rbenv global 3.0.3 

rbenv versions // 내가 설치한 ruby 버전으로 선택되었는지 마지막 확인
</code></pre></div></div>

<h4 id="jekyll-실행해-보기-실패해보기">Jekyll 실행해 보기 <del>(실패해보기)</del></h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle exec jekyll serve // 이게 jekyll을 local에서 실행해보는 명령임
// 어 안 되네 jekyll bundler 깔아야한대요

gem install jekyll bundler // jekyll bundler를 설치하라기에 함
// 근데 안 됨... 뭔가 환경변수를 설정해줘야 한대요.
</code></pre></div></div>

<p>bundle exec jekyll serve 를 이용해서 실행했을 때 오류없이 잘 떴다면
http://localhost:4000/ 로 접속했을 때 테마를 적용한 내 블로그가 잘 보여야 함.</p>

<p>하지만 난 잘 안…되었음…. 당연함. 방금 받은 뜨끈한 새 Mac임. 설정해둔 게 하나도 없음.<br />
그래서 앞에서 ruby를 깔았으면 rbenv PATH를 환경변수에 추가해줬어야하는데 그걸 안 했으니 당연히 오류나지~~<br />
환경변수 설정합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd ~ // home으로 이동하고

ls -al // 뭐있는지 한 번 본다

vim ~/.zshrc
</code></pre></div></div>

<p>Mac은 기본설정이 zsh입니다. bash shell을 사용하는 사람은 .bash_profile을 만드세요</p>

<p>.zshrc 파일에 다음과 같이 입력하고 저장</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[ -d ~/.rbenv  ]] &amp;&amp; \
  export PATH=${HOME}/.rbenv/bin:${PATH} &amp;&amp; \
  eval "$(rbenv init -)"
</code></pre></div></div>

<p>그 다음엔 저장한 환경변수를 적용해주어야하니 까먹지말고 아래 명령어 실행<br />
bash Shell 사용하시면 .zshrc 자리에 .bash_profile 적어야하는건 다들 눈치깠겠죠</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source ~/.zshrc
</code></pre></div></div>

<p>그럼 다시 bundler 설치합니다</p>

<h4 id="jekyll-실행해-보기-또-실패해보기">Jekyll 실행해 보기 <del>(또 실패해보기)</del></h4>

<p>아까 실패 버전에서는 jekyll bundler를 설치하려고 햇는데 그냥 설치하는 김에 통째로 설치합니다</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install bundler

jekyll -v // jekyll version 확인
//뭔가 이상한거 같다? 싶으면 그냥

gem install jekyll bundler // jekyll bundler 따로도 설치해보고...

cd /volumes/workspace/GitHub\ Blog/e-ul.github.io // 다시 소스있는 폴더로 돌아와서~

jekyll exec jekyll serve // 실행!!!
</code></pre></div></div>

<p>하지만 또 안 되었습니다.<br />
왜냐… webrick 때문임<br />
<a href="https://jekyllrb.com/docs/">Jekyll Docs</a> 의 QuickStart를 보니 Ruby 3 이상 버전에서 발생하는 현상이라함.<br />
뭐든 공식문서 읽어가면서 하자^~^</p>

<p><img src="https://user-images.githubusercontent.com/98747932/153124019-796f1481-b73f-4252-88e0-1e0f91eba34d.png" alt="add webrick" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle add webrick
</code></pre></div></div>

<h4 id="jekyll-실행해보기">Jekyll 실행해보기</h4>

<p>제가 자꾸 실패해봐서 지치셨나요? 그럴수도 있죠<br />
하지만 이번엔 진짜입니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll exec jekyll serve // 실행!!!
</code></pre></div></div>

<p>아마 이번에는 떴을거에요…<br />
혹시나 잘 안되었다면 댓글⌨️남겨주세요… 함께 고민해보시죠…해결은 장담 못 함..</p>

<h2 id="4-내-repository에-push하여-배포">4. 내 Repository에 Push하여 배포</h2>

<p>아휴 지친다….블로그 하나 만들기가 이렇게 힘들어서야…블로거 하겠습니까???<br />
하지만 나는 지치는 법을 모르지.. 끝까지 조지고 쉰다.</p>

<p>저는 현재 모습의 블로그를 만들기 위해서…. 받은 소스를 조금 뒤져서<br />
config.yml을 수정해서 블로그 이름을 바꾸고,<br />
타이틀 banner image를 변경하고,<span style="color:grey">(assets/images/banners : Yat 기준..다른 테마는 안받아봐서 모름)</span><br />
기존에 예시로 들어있던 post들<span style="color:grey">(_posts 폴더 아래)</span>을 지웠습니다.</p>

<p>일단 이 정도만 하고 local에서 잘 뜨는 걸 확인 한 뒤 first commit을 … ! !</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init // git initialize
git add . // 현재 폴더내의 모든 변경사항을 add
git commit -m "커밋 메시지" // commit....!!
git push -u origin master // 변경사항들을 내 Repository github서버에 반영해! 올려 ! !
</code></pre></div></div>

<p>자 이렇게까지하면… 드디어 나의 blog가 세상의 빛을 보게 됩니다…🥺✨<br />
https://본인의계정명.github.io/<br />
로 들어가서 잘 뜨는 지 확인해보고 함께….감격의 시간…가져보시죠</p>

<blockquote>
  <p>다시 한 번 말하지만, 틀린 거 잘못된 거 있으면,, 지적해주세요..고칠게요..<br />
하다가 잘 모르겠다 싶은 부분도 알려주세요. 함께 고민해봐요 해결해주겠다는 말은 아님☺️<br />
모니터뒤에 사람 있어요. 꼽주지마 상처주지마 나 기죽으니까….</p>
</blockquote>]]></content><author><name>e-ul</name></author><category term="Blog" /><category term="Blog" /><category term="GitHub" /><category term="Jekyll" /><category term="Ruby" /><summary type="html"><![CDATA[🪄 나도 만들었다 GitHub 블로그 ! ! ! 다시 만들 일은… 없을 것 같지만 기록은 해두기로 했다]]></summary></entry><entry><title type="html">1</title><link href="http://localhost:4000/log/2022/02/08/log-2-8-2022.html" rel="alternate" type="text/html" title="1" /><published>2022-02-08T00:00:00+09:00</published><updated>2022-02-08T00:00:00+09:00</updated><id>http://localhost:4000/log/2022/02/08/%5Blog%5D%202:8:2022</id><content type="html" xml:base="http://localhost:4000/log/2022/02/08/log-2-8-2022.html"><![CDATA[<p>📝이제까지 내가 해왔던 기록들은 정리되지 않아 쓰레기통에 버려지거나, 어딘가 처박혀 잊혀졌기때문에<br />
현대문명을 사용해 기록하여 조금이라도… 남겨보고자 GitHub Pages 라는것을 만들어보았습니다…</p>

<p>여러 블로그 플랫폼 중에 GitHub Pages 를 선택한 이유?</p>
<ul>
  <li>싫든 좋든 어쨌든 내가 개발자이긴한데 간죽간살 이게 제일 개발자스러우니까….</li>
  <li>진입장벽이 있다고 하니까…어차피 할 거면 제대로 하는 걸 좋아하기때문에 진입장벽 뚫어보고 싶었음</li>
</ul>

<p>github 계정은 1월에 만들었지만, 새 맥북을 기다리고 있었는데<br />
오늘 드디어 내돈내산 M1 Pro 맥북이 왔고(special Thx to. luvuluvul)<br />
바로 github pages 부터 제대로 시작해보기로!</p>

<p>그래서 내가 오늘 뭘 했냐면~<br />
✔️  github Repository 만들기<br />
✔️  jekyll theme 고르기<br />
✔️  jekyll theme을 실행하고 나의 github page 배포를 위해 필요한 것들</p>
<ol>
  <li>ruby</li>
  <li>jekyll</li>
  <li>git</li>
  <li>markdown</li>
</ol>

<p>✔️  그리고 지금 이 첫번째 포스트…뭐라도 적어보기</p>

<p>위의 것들을 하면서 이것 저것 툴도 받고….(일단 완전 clean 새 mac이니까~~ 필수 tool들도 받고 환경설정도 좀 했다)</p>

<p>하면서 자잘한 오류들을 이겨냈는데 이것도 적어두는게 좋겠지?<br />
나는 뭐든 잘 잊으니까</p>

<p>하지만 오늘은 지쳤으니 내일 마저하기로 한다.</p>

<p>앞으로 할 일은<br />
git 쓸 때마다 찾아보지 않고 쓸 수 있도록 git에 매우 익숙해지는 것,<br />
이렇게 plain text만 써서 재미없지 않도록 markdown 문법에 익숙해지는 것</p>

<p>블로그에 관련된 건 일단 이렇게 2개<br />
난 체력없고 낡은 사람이니까 욕심내면 지친다<br />
천천히 가야지</p>

<p>그럼 이만~~🥲</p>]]></content><author><name>e-ul</name></author><category term="log" /><category term="log" /><summary type="html"><![CDATA[📝이제까지 내가 해왔던 기록들은 정리되지 않아 쓰레기통에 버려지거나, 어딘가 처박혀 잊혀졌기때문에 현대문명을 사용해 기록하여 조금이라도… 남겨보고자 GitHub Pages 라는것을 만들어보았습니다…]]></summary></entry></feed>